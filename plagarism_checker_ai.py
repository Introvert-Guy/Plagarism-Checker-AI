# -*- coding: utf-8 -*-
"""Plagarism Checker AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S8HES1t9svfLcpzouGRNEdPBcuHoqpkc
"""

from google.colab import drive
drive.mount('/content/drive')

import zipfile
import os

# Extracting the dataset from ZIP
zip_file_path = "/content/drive/MyDrive/mit-plagiarism-detection-dataset.zip"
extract_path = "/content/mit_plagiarism_dataset"

if os.path.exists(zip_file_path):
    try:
        with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
            zip_ref.extractall(extract_path)
        print(f"Successfully extracted to '{extract_path}'")
    except zipfile.BadZipFile:
        print("Error: Not a valid zip file.")
    except Exception as e:
        print(f"Error: {e}")
else:
    print("Error: ZIP file not found")

import pandas as pd

# Load the dataset
data_file = '/content/mit_plagiarism_dataset/train_snli.txt'
df = pd.read_csv(data_file, sep='\t', header=None, names=['sentence1', 'sentence2', 'label'])
print("Sample data from dataset:")
print(df.head())
print("Label distribution:")
print(df['label'].value_counts(), "\n")

df = df.dropna()
df['label'] = df['label'].astype(int)

!pip install -q sentence-transformers

from sentence_transformers import SentenceTransformer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
import numpy as np

# Loading sentence transformer model
model = SentenceTransformer('all-MiniLM-L6-v2')

embeddings1 = model.encode(df['sentence1'].tolist(), convert_to_numpy=True, show_progress_bar=True)
embeddings2 = model.encode(df['sentence2'].tolist(), convert_to_numpy=True, show_progress_bar=True)

features = np.concatenate([
    np.abs(embeddings1 - embeddings2),
    embeddings1 * embeddings2
], axis=1)

X_train, X_test, y_train, y_test = train_test_split(features, df['label'], test_size=0.2, random_state=42)

clf = LogisticRegression(max_iter=1000)
clf.fit(X_train, y_train)

y_train_pred = clf.predict(X_train)
y_test_pred = clf.predict(X_test)

print("Training Accuracy:", accuracy_score(y_train, y_train_pred))
print("Testing Accuracy:", accuracy_score(y_test, y_test_pred))
print("\nClassification Report:\n", classification_report(y_test, y_test_pred))

import joblib
from sentence_transformers import SentenceTransformer
import numpy as np


def check_plagiarism(sentence1, sentence2):
    emb1 = model.encode([sentence1], convert_to_numpy=True)
    emb2 = model.encode([sentence2], convert_to_numpy=True)

    features = np.concatenate([np.abs(emb1 - emb2), emb1 * emb2], axis=1)
    pred = clf.predict(features)[0]
    prob = clf.predict_proba(features)[0][pred]

    if pred == 1:
        print(f"Plagiarism Detected! Similarity Confidence: {prob:.2f}")
    else:
        print(f"No Plagiarism Detected. Similarity Confidence: {prob:.2f}")

print("\nEnter two sentences to check for plagiarism similarity:")
s1 = input("Enter first sentence: ")
s2 = input("Enter second sentence: ")

check_plagiarism(s1, s2)